/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface EnhancedImageButtonCheckmark {
    'checked': boolean;
    'text': string;
    'toggle': (event: MouseEvent) => void;
  }
  interface EnhancedImageButtonCheckmarkAttributes extends StencilHTMLAttributes {
    'checked'?: boolean;
    'text'?: string;
    'toggle'?: (event: MouseEvent) => void;
  }

  interface EnhancedImageButtonItem {
    'icon': any;
    'onClick': (event: MouseEvent) => void;
    'text': string;
  }
  interface EnhancedImageButtonItemAttributes extends StencilHTMLAttributes {
    'icon'?: any;
    'onClick'?: (event: MouseEvent) => void;
    'text'?: string;
  }

  interface EnhancedImageSettingsButton {
    /**
    * onClick function.
    */
    'onClick': any;
  }
  interface EnhancedImageSettingsButtonAttributes extends StencilHTMLAttributes {
    /**
    * onClick function.
    */
    'onClick'?: any;
  }

  interface EnhancedImageSettingsList {
    'brightnessSliderValue': any;
    'colorsInvert': any;
    'colorsInverted': any;
    'contrastSliderValue': any;
    'fullscreen': any;
    'fullscreenToggled': any;
    'handleSliderInput': any;
    'hueSliderValue': any;
    /**
    * Invert the colors.
    */
    'invertColors': any;
    'saturationSliderValue': any;
    'saveImage': any;
    'setSlider': any;
    /**
    * Set the value of the sliders.
    */
    'setSliderValue': any;
    /**
    * The source of the image.
    */
    'src': string;
  }
  interface EnhancedImageSettingsListAttributes extends StencilHTMLAttributes {
    'brightnessSliderValue'?: any;
    'colorsInvert'?: any;
    'colorsInverted'?: any;
    'contrastSliderValue'?: any;
    'fullscreen'?: any;
    'fullscreenToggled'?: any;
    'handleSliderInput'?: any;
    'hueSliderValue'?: any;
    /**
    * Invert the colors.
    */
    'invertColors'?: any;
    'saturationSliderValue'?: any;
    'saveImage'?: any;
    'setSlider'?: any;
    /**
    * Set the value of the sliders.
    */
    'setSliderValue'?: any;
    /**
    * The source of the image.
    */
    'src'?: string;
  }

  interface EnhancedImageSettings {
    'fullscreen': any;
    'fullscreenToggled': boolean;
    /**
    * Invert the colors.
    */
    'invertColors': any;
    /**
    * Set the value of the sliders.
    */
    'setSliderValue': any;
    /**
    * The source of the image.
    */
    'src': string;
  }
  interface EnhancedImageSettingsAttributes extends StencilHTMLAttributes {
    'fullscreen'?: any;
    'fullscreenToggled'?: boolean;
    /**
    * Invert the colors.
    */
    'invertColors'?: any;
    /**
    * Set the value of the sliders.
    */
    'setSliderValue'?: any;
    /**
    * The source of the image.
    */
    'src'?: string;
  }

  interface EnhancedImageSliderItem {
    'handleSliderInput': any;
    'max': number;
    'min': number;
    'setSlider': any;
    'sliderValue': any;
    /**
    * The type of the slider.
    */
    'type': string;
    'valueSign': string;
  }
  interface EnhancedImageSliderItemAttributes extends StencilHTMLAttributes {
    'handleSliderInput'?: any;
    'max'?: number;
    'min'?: number;
    'setSlider'?: any;
    'sliderValue'?: any;
    /**
    * The type of the slider.
    */
    'type'?: string;
    'valueSign'?: string;
  }

  interface EnhancedImage {
    /**
    * The position of the settings button
    */
    'settingsPosition': string;
    /**
    * The source of the image
    */
    'src': string;
    'styling': string;
  }
  interface EnhancedImageAttributes extends StencilHTMLAttributes {
    /**
    * The position of the settings button
    */
    'settingsPosition'?: string;
    /**
    * The source of the image
    */
    'src'?: string;
    'styling'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'EnhancedImageButtonCheckmark': Components.EnhancedImageButtonCheckmark;
    'EnhancedImageButtonItem': Components.EnhancedImageButtonItem;
    'EnhancedImageSettingsButton': Components.EnhancedImageSettingsButton;
    'EnhancedImageSettingsList': Components.EnhancedImageSettingsList;
    'EnhancedImageSettings': Components.EnhancedImageSettings;
    'EnhancedImageSliderItem': Components.EnhancedImageSliderItem;
    'EnhancedImage': Components.EnhancedImage;
  }

  interface StencilIntrinsicElements {
    'enhanced-image-button-checkmark': Components.EnhancedImageButtonCheckmarkAttributes;
    'enhanced-image-button-item': Components.EnhancedImageButtonItemAttributes;
    'enhanced-image-settings-button': Components.EnhancedImageSettingsButtonAttributes;
    'enhanced-image-settings-list': Components.EnhancedImageSettingsListAttributes;
    'enhanced-image-settings': Components.EnhancedImageSettingsAttributes;
    'enhanced-image-slider-item': Components.EnhancedImageSliderItemAttributes;
    'enhanced-image': Components.EnhancedImageAttributes;
  }


  interface HTMLEnhancedImageButtonCheckmarkElement extends Components.EnhancedImageButtonCheckmark, HTMLStencilElement {}
  var HTMLEnhancedImageButtonCheckmarkElement: {
    prototype: HTMLEnhancedImageButtonCheckmarkElement;
    new (): HTMLEnhancedImageButtonCheckmarkElement;
  };

  interface HTMLEnhancedImageButtonItemElement extends Components.EnhancedImageButtonItem, HTMLStencilElement {}
  var HTMLEnhancedImageButtonItemElement: {
    prototype: HTMLEnhancedImageButtonItemElement;
    new (): HTMLEnhancedImageButtonItemElement;
  };

  interface HTMLEnhancedImageSettingsButtonElement extends Components.EnhancedImageSettingsButton, HTMLStencilElement {}
  var HTMLEnhancedImageSettingsButtonElement: {
    prototype: HTMLEnhancedImageSettingsButtonElement;
    new (): HTMLEnhancedImageSettingsButtonElement;
  };

  interface HTMLEnhancedImageSettingsListElement extends Components.EnhancedImageSettingsList, HTMLStencilElement {}
  var HTMLEnhancedImageSettingsListElement: {
    prototype: HTMLEnhancedImageSettingsListElement;
    new (): HTMLEnhancedImageSettingsListElement;
  };

  interface HTMLEnhancedImageSettingsElement extends Components.EnhancedImageSettings, HTMLStencilElement {}
  var HTMLEnhancedImageSettingsElement: {
    prototype: HTMLEnhancedImageSettingsElement;
    new (): HTMLEnhancedImageSettingsElement;
  };

  interface HTMLEnhancedImageSliderItemElement extends Components.EnhancedImageSliderItem, HTMLStencilElement {}
  var HTMLEnhancedImageSliderItemElement: {
    prototype: HTMLEnhancedImageSliderItemElement;
    new (): HTMLEnhancedImageSliderItemElement;
  };

  interface HTMLEnhancedImageElement extends Components.EnhancedImage, HTMLStencilElement {}
  var HTMLEnhancedImageElement: {
    prototype: HTMLEnhancedImageElement;
    new (): HTMLEnhancedImageElement;
  };

  interface HTMLElementTagNameMap {
    'enhanced-image-button-checkmark': HTMLEnhancedImageButtonCheckmarkElement
    'enhanced-image-button-item': HTMLEnhancedImageButtonItemElement
    'enhanced-image-settings-button': HTMLEnhancedImageSettingsButtonElement
    'enhanced-image-settings-list': HTMLEnhancedImageSettingsListElement
    'enhanced-image-settings': HTMLEnhancedImageSettingsElement
    'enhanced-image-slider-item': HTMLEnhancedImageSliderItemElement
    'enhanced-image': HTMLEnhancedImageElement
  }

  interface ElementTagNameMap {
    'enhanced-image-button-checkmark': HTMLEnhancedImageButtonCheckmarkElement;
    'enhanced-image-button-item': HTMLEnhancedImageButtonItemElement;
    'enhanced-image-settings-button': HTMLEnhancedImageSettingsButtonElement;
    'enhanced-image-settings-list': HTMLEnhancedImageSettingsListElement;
    'enhanced-image-settings': HTMLEnhancedImageSettingsElement;
    'enhanced-image-slider-item': HTMLEnhancedImageSliderItemElement;
    'enhanced-image': HTMLEnhancedImageElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
